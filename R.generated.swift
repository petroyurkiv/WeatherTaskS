//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `bgSunnyColor`.
    static let bgSunnyColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "bgSunnyColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "bgSunnyColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bgSunnyColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bgSunnyColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "bgSunnyColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func bgSunnyColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.bgSunnyColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Inter-Medium.ttf`.
    static let interMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Medium", pathExtension: "ttf")
    /// Resource file `Inter-Regular.ttf`.
    static let interRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Regular", pathExtension: "ttf")
    /// Resource file `Inter-SemiBold.ttf`.
    static let interSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-SemiBold", pathExtension: "ttf")

    /// `bundle.url(forResource: "Inter-Medium", withExtension: "ttf")`
    static func interMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Regular", withExtension: "ttf")`
    static func interRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-SemiBold", withExtension: "ttf")`
    static func interSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Inter-Medium`.
    static let interMedium = Rswift.FontResource(fontName: "Inter-Medium")
    /// Font `Inter-Regular`.
    static let interRegular = Rswift.FontResource(fontName: "Inter-Regular")
    /// Font `Inter-SemiBold`.
    static let interSemiBold = Rswift.FontResource(fontName: "Inter-SemiBold")

    /// `UIFont(name: "Inter-Medium", size: ...)`
    static func interMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interMedium, size: size)
    }

    /// `UIFont(name: "Inter-Regular", size: ...)`
    static func interRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interRegular, size: size)
    }

    /// `UIFont(name: "Inter-SemiBold", size: ...)`
    static func interSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.interMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Medium' could not be loaded, is 'Inter-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Regular' could not be loaded, is 'Inter-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-SemiBold' could not be loaded, is 'Inter-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `humidityImage`.
    static let humidityImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "humidityImage")
    /// Image `visibilityImage`.
    static let visibilityImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibilityImage")
    /// Image `windImage`.
    static let windImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "windImage")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "humidityImage", bundle: ..., traitCollection: ...)`
    static func humidityImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humidityImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibilityImage", bundle: ..., traitCollection: ...)`
    static func visibilityImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "windImage", bundle: ..., traitCollection: ...)`
    static func windImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.texts` struct is generated, and contains static references to 6 localization keys.
    struct texts {
      /// en translation: Daily summary
      ///
      /// Locales: en, uk
      static let weatherTaskSwiftUIDailySummaryViewTitle = Rswift.StringResource(key: "WeatherTaskSwiftUI.DailySummaryView.title", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Humidity
      ///
      /// Locales: en, uk
      static let weatherTaskSwiftUIDailySummaryViewItemSubitleHumidity = Rswift.StringResource(key: "WeatherTaskSwiftUI.DailySummaryView.itemSubitle.humidity", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, uk
      static let weatherTaskSwiftUISearchViewTitle = Rswift.StringResource(key: "WeatherTaskSwiftUI.SearchView.title", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Visibility
      ///
      /// Locales: en, uk
      static let weatherTaskSwiftUIDailySummaryViewItemSubitleVisibility = Rswift.StringResource(key: "WeatherTaskSwiftUI.DailySummaryView.itemSubitle.visibility", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Weekly forecast
      ///
      /// Locales: en, uk
      static let weatherTaskSwiftUIWeeklyForecastViewTitle = Rswift.StringResource(key: "WeatherTaskSwiftUI.WeeklyForecastView.title", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)
      /// en translation: Wind
      ///
      /// Locales: en, uk
      static let weatherTaskSwiftUIDailySummaryViewItemSubitleWind = Rswift.StringResource(key: "WeatherTaskSwiftUI.DailySummaryView.itemSubitle.wind", tableName: "Texts", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)

      /// en translation: Daily summary
      ///
      /// Locales: en, uk
      static func weatherTaskSwiftUIDailySummaryViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.title", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "WeatherTaskSwiftUI.DailySummaryView.title"
        }

        return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.title", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Humidity
      ///
      /// Locales: en, uk
      static func weatherTaskSwiftUIDailySummaryViewItemSubitleHumidity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.itemSubitle.humidity", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "WeatherTaskSwiftUI.DailySummaryView.itemSubitle.humidity"
        }

        return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.itemSubitle.humidity", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, uk
      static func weatherTaskSwiftUISearchViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherTaskSwiftUI.SearchView.title", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "WeatherTaskSwiftUI.SearchView.title"
        }

        return NSLocalizedString("WeatherTaskSwiftUI.SearchView.title", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Visibility
      ///
      /// Locales: en, uk
      static func weatherTaskSwiftUIDailySummaryViewItemSubitleVisibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.itemSubitle.visibility", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "WeatherTaskSwiftUI.DailySummaryView.itemSubitle.visibility"
        }

        return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.itemSubitle.visibility", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Weekly forecast
      ///
      /// Locales: en, uk
      static func weatherTaskSwiftUIWeeklyForecastViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherTaskSwiftUI.WeeklyForecastView.title", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "WeatherTaskSwiftUI.WeeklyForecastView.title"
        }

        return NSLocalizedString("WeatherTaskSwiftUI.WeeklyForecastView.title", tableName: "Texts", bundle: bundle, comment: "")
      }

      /// en translation: Wind
      ///
      /// Locales: en, uk
      static func weatherTaskSwiftUIDailySummaryViewItemSubitleWind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.itemSubitle.wind", tableName: "Texts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Texts", preferredLanguages: preferredLanguages) else {
          return "WeatherTaskSwiftUI.DailySummaryView.itemSubitle.wind"
        }

        return NSLocalizedString("WeatherTaskSwiftUI.DailySummaryView.itemSubitle.wind", tableName: "Texts", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
